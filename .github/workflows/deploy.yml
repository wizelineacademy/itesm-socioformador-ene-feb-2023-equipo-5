name: Build and Deploy to AWS Lightsail

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: us-east-1
  MAIN_SERVICE_NAME: smartspeak
  DEV_SERVICE_NAME: smartspeak-dev
  MAIN_CONTAINER_NAME: smartspeak-container
  DEV_CONTAINER_NAME: smartspeak-container-dev
  MAIN_IMAGE_NAME: smartspeak-image
  DEV_IMAGE_NAME: smartspeak-image-dev

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Install AWS Client
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Set environment variables
        run: |
          echo "CONTAINER_NAME=${{ env.MAIN_CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.MAIN_IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Build Docker Image
        run: docker build -t ${{ env.MAIN_SERVICE_NAME }}:release .
      - name: Push and Deploy
        run: |
          service_name=${{ env.MAIN_SERVICE_NAME }}
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label ${service_name} \
            --image ${service_name}:release
          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output ".containerImages[0].image" > image.txt
          jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container-updated.json
          jq --arg s3Endpoint ${{ secrets.S3_ENDPOINT }} '.containers.app.environment["S3_ENDPOINT"] = $s3Endpoint' container-updated.json > container-updated-S3-ENDPOINT.json
          jq --arg s3Key ${{ secrets.S3_KEY }} '.containers.app.environment["S3_KEY"] = $s3Key' container-updated-S3-ENDPOINT.json > container-updated-S3-KEY.json
          jq --arg s3Secret ${{ secrets.S3_SECRET }} '.containers.app.environment["S3_SECRET"] = $s3Secret' container-updated-S3-KEY.json > container-updated-S3-SECRET.json
          jq --arg auth0ClientId ${{ secrets.AUTH0_CLIENT_ID_MAIN }} '.containers.app.environment["AUTH0_CLIENT_ID"] = $auth0ClientId' container-updated-S3-SECRET.json > container-updated-AUTH-ID.json
          jq --arg auth0ClientSecret ${{ secrets.AUTH0_CLIENT_SECRET_MAIN }} '.containers.app.environment["AUTH0_CLIENT_SECRET"] = $auth0ClientSecret' container-updated-AUTH-ID.json > container-updated-AUTH-SECRET.json
          jq --arg auth0Domain ${{ secrets.AUTH0_DOMAIN }} '.containers.app.environment["AUTH0_DOMAIN"] = $auth0Domain' container-updated-AUTH-SECRET.json > container-updated-AUTH-DOMAIN.json
          jq --arg auth0CallbackUrl ${{ secrets.AUTH0_CALLBACK_URL_MAIN }} '.containers.app.environment["AUTH0_CALLBACK_URL"] = $auth0CallbackUrl' container-updated-AUTH-DOMAIN.json > container-updated-AUTH-CALLBACK.json
          jq --arg auth0ReturnToUrl ${{ secrets.AUTH0_RETURN_TO_URL_MAIN }} '.containers.app.environment["AUTH0_RETURN_TO_URL"] = $auth0ReturnToUrl' container-updated-AUTH-CALLBACK.json > container-updated-AUTH-RETURN.json
          jq --arg auth0LogoutUrl ${{ secrets.AUTH0_LOGOUT_URL }} '.containers.app.environment["AUTH0_LOGOUT_URL"] = $auth0LogoutUrl' container-updated-AUTH-RETURN.json > container-updated-AUTH-LOGOUT.json
          jq --arg databaseUrl ${{ secrets.DATABASE_MAIN_URL }} '.containers.app.environment["DATABASE_URL"] = $databaseUrl' container-updated-AUTH-LOGOUT.json > container.json
          aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json
    if: github.ref == 'refs/heads/main'

  build_and_deploy_dev:
    name: Build and Deploy (Dev)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Install AWS Client
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Set environment variables
        run: |
          echo "CONTAINER_NAME=${{ env.DEV_CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ env.DEV_IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Build Docker Image
        run: docker build -t ${{ env.DEV_SERVICE_NAME }}:release .
      - name: Push and Deploy
        run: |
          service_name=${{ env.DEV_SERVICE_NAME }}
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label ${service_name} \
            --image ${service_name}:release
          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output ".containerImages[0].image" > image.txt
          jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container-updated.json
          jq --arg s3Endpoint ${{ secrets.S3_ENDPOINT }} '.containers.app.environment["S3_ENDPOINT"] = $s3Endpoint' container-updated.json > container-updated-S3-ENDPOINT.json
          jq --arg s3Key ${{ secrets.S3_KEY }} '.containers.app.environment["S3_KEY"] = $s3Key' container-updated-S3-ENDPOINT.json > container-updated-S3-KEY.json
          jq --arg s3Secret ${{ secrets.S3_SECRET }} '.containers.app.environment["S3_SECRET"] = $s3Secret' container-updated-S3-KEY.json > container-updated-S3-SECRET.json
          jq --arg auth0ClientId ${{ secrets.AUTH0_CLIENT_ID_DEV }} '.containers.app.environment["AUTH0_CLIENT_ID"] = $auth0ClientId' container-updated-S3-SECRET.json > container-updated-AUTH-ID.json
          jq --arg auth0ClientSecret ${{ secrets.AUTH0_CLIENT_SECRET_DEV }} '.containers.app.environment["AUTH0_CLIENT_SECRET"] = $auth0ClientSecret' container-updated-AUTH-ID.json > container-updated-AUTH-SECRET.json
          jq --arg auth0Domain ${{ secrets.AUTH0_DOMAIN }} '.containers.app.environment["AUTH0_DOMAIN"] = $auth0Domain' container-updated-AUTH-SECRET.json > container-updated-AUTH-DOMAIN.json
          jq --arg auth0CallbackUrl ${{ secrets.AUTH0_CALLBACK_URL_DEV }} '.containers.app.environment["AUTH0_CALLBACK_URL"] = $auth0CallbackUrl' container-updated-AUTH-DOMAIN.json > container-updated-AUTH-CALLBACK.json
          jq --arg auth0ReturnToUrl ${{ secrets.AUTH0_RETURN_TO_URL_DEV }} '.containers.app.environment["AUTH0_RETURN_TO_URL"] = $auth0ReturnToUrl' container-updated-AUTH-CALLBACK.json > container-updated-AUTH-RETURN.json
          jq --arg auth0LogoutUrl ${{ secrets.AUTH0_LOGOUT_URL }} '.containers.app.environment["AUTH0_LOGOUT_URL"] = $auth0LogoutUrl' container-updated-AUTH-RETURN.json > container-updated-AUTH-LOGOUT.json
          jq --arg databaseUrl ${{ secrets.DATABASE_DEV_URL }} '.containers.app.environment["DATABASE_URL"] = $databaseUrl' container-updated-AUTH-LOGOUT.json > container.json
          aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json
    if: github.ref == 'refs/heads/dev'

